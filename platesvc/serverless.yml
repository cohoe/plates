# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: platesvc

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.6
  memorySize: 128

  iamRoleStatements:
    - Effect: Allow
      Action:
      	- sns:Publish
      Resource:
        - "Ref": "pendingReviewsTopic"

    - Effect: Allow
      Action:
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:*:*:table/plates-*"
#        Fn::Join:
#            - ""
#            - - "arn:aws:dynamodb:*:*:table/"
#              - "Ref": "pendingReviewsTable"

resources:
    Resources:
        pendingReviewsTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: plates-pendingreviews
                AttributeDefinitions:
                  - AttributeName: id
                    AttributeType: S
                KeySchema:
                  - AttributeName: id
                    KeyType: HASH
                ProvisionedThroughput:
                    ReadCapacityUnits: 1
                    WriteCapacityUnits: 1
                StreamSpecification:
                    StreamViewType: KEYS_ONLY
        venuesTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: plates-venues
                AttributeDefinitions:
                    - AttributeName: name
                      AttributeType: S
                KeySchema:
                    - AttributeName: name
                      KeyType: HASH
                ProvisionedThroughput:
                    ReadCapacityUnits: 1
                    WriteCapacityUnits: 1
        pendingReviewsTopic:
            Type: AWS::SNS::Topic
            Properties:
                TopicName: plates-PendingReviews
                DisplayName: PlateAdmin


functions:
    notifypending:
        handler: handler.notifypending
        events:
            - stream:
                type: dynamodb
                arn:
                    Fn::GetAtt:
                        - pendingReviewsTable
                        - StreamArn

    submitreview:
        handler: reviews.submit
        events:
            - http:
                path: review
                method: post
    
    checkreview:
        handler: reviews.approval
        events:
            - http:
                path: fuckapproval/{review_id}
                method: get
                cors: true

    rejectreview:
        handler: reviews.reject
        events:
            - http:
                path: reject/{review_id}
                method: get

    acceptreview:
        handler: reviews.accept
        events:
            - http:
                path: accept/{review_id}
                method: get

    createvenue:
        handler: venues.create
        events:
            - http:
                path: venue
                method: post

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
